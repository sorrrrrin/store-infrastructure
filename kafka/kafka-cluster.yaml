apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: my-cluster
  annotations:
    strimzi.io/node-pools: enabled
    strimzi.io/kraft: enabled
spec:
  kafka:
    version: 3.9.0
    metadataVersion: "3.9"
    # The replicas field is required by the Kafka CRD schema while the KafkaNodePools feature gate is in alpha phase.
    # But it will be ignored when Kafka Node Pools are used
    replicas: 1
    resources:
      requests:
        memory: 300Mi
        cpu: "0.5"
      limits:
        memory: 500Mi
        cpu: "1"
    logging:
      type: inline
      loggers:
        log4j.logger.io.strimzi: "DEBUG"
        log4j.logger.kafka: "DEBUG"
        log4j.logger.org.apache.kafka: "DEBUG"
#    authorization:
#      type: opa
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: external1
        port: 9093
        tls: false
        type: loadbalancer
#      - name: tls
#        port: 9093
#        type: internal
#        tls: true
#        authentication:
#          type: scram-sha-512
#      - name: external
#        port: 9094
#        type: loadbalancer
#        tls: true
#        authentication:
#          type: scram-sha-512
#        configuration:
#          bootstrap:
#            annotations:
#              service.beta.kubernetes.io/azure-load-balancer-internal: "true"
#          brokers:
#            - broker: 0
#              annotations:
#                service.beta.kubernetes.io/azure-load-balancer-internal: "true"
#            - broker: 1
#              annotations:
#                service.beta.kubernetes.io/azure-load-balancer-internal: "true"
#            - broker: 2
#              annotations:
#                service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    config:
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      default.replication.factor: 1
      min.insync.replicas: 1
      inter.broker.protocol.version: "3.9"
    # The storage field is required by the Kafka CRD schema while the KafkaNodePools feature gate is in alpha phase.
    # But it will be ignored when Kafka Node Pools are used
    storage:
      type: jbod
      volumes:
        - id: 0
          type: persistent-claim
          size: 2Gi
          deleteClaim: false
#    metricsConfig:
#      type: jmxPrometheusExporter
#      valueFrom:
#        configMapKeyRef:
#          name: kafka-metrics
#          key: kafka-kraft-metrics-config.yml
  # The ZooKeeper section is required by the Kafka CRD schema while the UseKRaft feature gate is in alpha phase.
  # But it will be ignored when running in KRaft mode
  zookeeper:
    replicas: 1
    storage:
      type: persistent-claim
      size: 1Gi
      deleteClaim: false
#    metricsConfig:
#      type: jmxPrometheusExporter
#      valueFrom:
#        configMapKeyRef:
#          name: kafka-metrics
#          key: zookeeper-metrics-config.yml
    resources:
      requests:
        memory: 500Mi
        cpu: "1"
      limits:
        memory: 500Mi
        cpu: "2"
    template:
      pod:
        priorityClassName: high-priority
  entityOperator:
#    tlsSidecar: # (28)
#      resources:
#        requests:
#          cpu: 100m
#          memory: 32Mi
#        limits:
#          cpu: 200m
#          memory: 64Mi
    topicOperator:
      watchedNamespace: kafka
      reconciliationIntervalMs: 60000
      logging: # (29)
        type: inline
        loggers:
          rootLogger.level: INFO
      resources:
        requests:
          memory: 256Mi
          cpu: "500m"
        limits:
          memory: 512Mi
          cpu: "1"
    userOperator:
      watchedNamespace: kafka
      reconciliationIntervalMs: 60000
      logging: # (30)
        type: inline
        loggers:
          rootLogger.level: INFO
      resources:
        requests:
          memory: 256Mi
          cpu: "500m"
        limits:
          memory: 512Mi
          cpu: "1"

#  kafkaExporter:
#    template:
#      pod:
#        affinity:
#          nodeAffinity:
#            requiredDuringSchedulingIgnoredDuringExecution:
#              nodeSelectorTerms:
#                - matchExpressions:
#                    - key: kubernetes.io/hostname
#                      operator: In
#                      values:
#                        - minikube
#  cruiseControl:
#    metricsConfig:
#      type: jmxPrometheusExporter
#      valueFrom:
#        configMapKeyRef:
#          name: cruise-control-metrics
#          key: metrics-config.yml
